[["index.html", "Shimmer User Guide Version 1.0 Introduction", " Shimmer User Guide Version 1.0 2022-12-17 Introduction Welcome to the Shiny Model Explorer (Shimmer) user guide. This documentation serves as a step-by-step navigation guide for the shiny application and outlines the basic functionality available for modeling and simulation projects. This user guide is not intended to be a comprehensive reference of the modeling techniques used in this application and assumes the user has experience in model building and interpretation. The modeling in this application is based on an implementation of the mrgsolve package. Prior experience with the mrgsolve package is assumed for this shiny application. Whenever a reference is made from a source package or function, source documentation can be found at the bottom of the section. The main reference source can be found here: https://mrgsolve.org/user_guide/. Resources Main resource page: https://mrgsolve.github.io Vignettes: https://mrgsolve.github.io/vignettes R documentation: https://mrgsolve.github.io/docs Gallery: https://github.com/mrgsolve/gallery   "],["dash.html", "Chapter 1 Dashboard", " Chapter 1 Dashboard In the current version, Dashboard is a landing page and does not contain any functionality. We intend to enhance the dashboard in a later version with more features, such as analytics and user-specific information.   "],["simsteps.html", "Chapter 2 Simulation Steps", " Chapter 2 Simulation Steps Upon launching the application, Simulation Steps appear at the top left corner. This is an interface displaying the necessary actions that need to be performed in order to produce simulation results. Action items in this list will be removed as they are performed by the user.   "],["modselect.html", "Chapter 3 Model Selection 3.1 Select from Model Library 3.2 Upload Custom Model File 3.3 Load Model 3.4 Model Parameters", " Chapter 3 Model Selection Step 1/4 of Simulation Steps This application comes with a model library to select from, which can be found as indexed in Select from Model Library. Model Selection also allows users to Upload Custom Model File for user-defined model specifications that may not be in the model library.   3.1 Select from Model Library The model library includes a collection of standard pharmacokinetic (PK) models for biologics:   3.1.1 Model Library Abbreviations popPK: population pharmacokinetic model cmt: compartment mm: Michaelis-Menten iv: intravenous injection sc: subcutaneous injection tmdd: target mediated drug disposition abs: absorption compartment const: constant qe: quasi-equilibrium qss: quasi-steady state 3.1.2 Population PK Models popPK_1cmt_mm_iv-sc: 1 compartment PK with Michaelis-Menten elimination &amp; IV/SC dosing popPK_1cmt_linear_iv-sc: 1 compartment PK with linear elimination &amp; IV/SC dosing popPK_1cmt_linear-mm_iv-sc: 1 compartment PK with Michaelis-Menten/linear elimination &amp; IV/SC dosing popPK_2cmt_mm_iv-sc: 2 compartment PK with Michaelis-Menten elimination &amp; IV/SC dosing popPK_2cmt_linear_iv-sc: 2 compartment PK with linear elimination &amp; IV/SC dosing popPK_2cmt_linear-mm_iv-sc: 2 compartment PK with Michaelis-Menten/linear elimination &amp; IV/SC dosing popPK_3cmt_linear_iv-sc: 3 compartment PK with linear elimination &amp; IV/SC dosing 3.1.3 Target-Mediated Drug Disposition Models tmdd_full_2cmt_1abs: 2 compartment full TMDD model tmdd_mm_2cmt_1abs: 2 compartment TMDD model under Michaelis-Menten approximation tmdd_mm-const_2cmt_1abs: 2 compartment TMDD model under Michaelis-Menten approximation with constant concentration of target tmdd_qe_2cmt_1abs: 2 compartment TMDD model under quasi-equilibrium approximation tmdd_qe-const_2cmt_1abs: 2 compartment TMDD model under quasi-equilibrium approximation with constant concentration of target tmdd_qss_2cmt_1abs: 2 compartment TMDD model under quasi-steady state approximation tmdd_qss-const_2cmt_1abs: 2 compartment TMDD model under quasi-steady state approximation with constant concentration of target   3.2 Upload Custom Model File Users can upload a custom model-specification file (.cpp) that is compatible with this application. A fully annotated example mrgsolve model specification file from the model library is shown below: Currently loaded model: popPK_1cmt_linear_iv-sc $PARAM @annotated TVCL : 1.0000 : Clearance (L/day) TVV2 : 25.000 : Central volume of distribution (L) TVKA : 0.5000 : Absorption rate constant (1/day) TVF1 : 0.6100 : Bioavailability (unitless) DOSE : 0 : Dose amount (mg) REGNUM : 0 : Dose regimen numeric ID (unitless) WT : 70.0 : Baseline subject body weight (kg) WTREF : 70.0 : Reference body weight (kg) WTCL : 0.75 : Power law exponent for body weight on CL (unitless) WTV2 : 1.00 : Power law exponent for body weight on V2 (unitless) $CMT @annotated ABS : SC dose absorption compartment (mg) CENT : Central compartment (mg) $OMEGA @annotated ETA_CL : 0.1000 : IIV on CL (L/day) ETA_V2 : 0.1000 : IIV on V2 (L) ETA_KA : 0.0100 : IIV on KA (1/day) ETA_F1 : 0.0100 : IIV on F1 (unitless) $SIGMA @annotated PROP : 0.0001 : Proportional residual error (unitless) ADD : 0.1000 : Additive residual error (mg/L) $MAIN double CL = TVCL * exp(ETA_CL) * pow(WT/WTREF, WTCL); double V2 = TVV2 * exp(ETA_V2) * pow(WT/WTREF, WTV2); double KA = TVKA * exp(ETA_KA); double F1 = (exp(TVF1 + ETA_F1) / (1 + exp(TVF1 + ETA_F1))); F_ABS = F1; double S2 = V2; // Scaling factor for central volume: dose = mg; conc = mg/L $ODE dxdt_ABS = -KA*ABS; dxdt_CENT = KA*ABS - (CL/V2)*CENT; $TABLE double IPRED = (CENT/S2); double CP = IPRED; double DV = IPRED*(1+PROP)+ADD; // resimulate residual error (SIGMA) parameters if concentration is negative int i = 1; while(DV &lt; 0 &amp; i &lt;= 100) { simeps(1); simeps(2); DV = IPRED * (1 + PROP) + ADD; i++; } if(i &gt; 100) mrg::report(&quot;Positive concentrations could not be obtained.&quot;); $CAPTURE @annotated DOSE : Dose amount (mg) REGNUM : Dose regimen numeric ID (unitless) WT : Baseline subject body weight (kg) WTREF : Reference body weight (kg) DV : Plasma concentration (mg/L) IPRED : Individual predicted plasma concentration (mg/L) mrgsolve: Model Specification mrgsolve: Code blocks mrgsolve: Examples mrgsolve: Annotated model specification   3.3 Load Model After selecting a model from the library or uploading a custom model, execute Load Model . If the model file is properly formatted, the name of the model should appear under Currently loaded model and the contents of the model file should appear under Model Specification file. If an invalid model specification file is uploaded, users will be notified with an error message stating: (“Invalid model specification file! Please select a different model…”)     3.4 Model Parameters 3.4.1 Fixed Effects Fixed Effects provides a pop-up window that allows users to specify values for parameters defined in the $PARAM code block of the model file. An example of how fixed effects are linked to the model specification file is shown below.       3.4.2 Random Effects Random Effects provides a pop-up window with variability options that allows the user to simulate variates using three options: Skip random effects using: None Simulate between-subject random effects (one draw per individual) using: Interindividual Variability Simulate within-subject random effects (one draw per observation) using: Residual Variability Simulate using between and within subject random effects using: Both These random effect matrices are presented in correlation matrix form where: Diagonal elements: variances Off-diagonal elements: correlations. Valid off-diagonal elements must be in the range: [-1, 1].   The Check Matrices function initiates matrix validation tests which check for the following: Square matrix Symmetric matrix Pass matrix into mrgsolve::mvgauss() and verify valid results (invalid matrices produce NaN results) mrgsolve::mvgauss() Transient pop-up messages will appear stating the results of the validation check for each variability option in the form of: mrgsolve: Random effect variances   "],["simdet.html", "Chapter 4 Simulation Details 4.1 Define Dosing Regimen 4.2 Submit Dosing Regimen 4.3 Simulation Options", " Chapter 4 Simulation Details This section allows users to Submit Dosing Regimen and provides Simulation Options such as Time Grid, Simulation Settings, and Solver Settings that can be combined with the model to create complex sampling designs. Each of these are discussed below.   4.1 Define Dosing Regimen Dosing regimen submission creates an Rx event object that defines the dosing interventions for a single subject in the current model. Define Dosing Regimen is an text input field that allows full customization of user-defined dosing regimens in a given simulation. By default, there is a placeholder Rx label specification in the text field to illustrate proper Rx label syntax required by mrgsolve::ev_rx for complex, mutli-period dosing regimens. The Rx Label Syntax Documentation button, located below the Define Dosing Regimen text input box, opens reference documentation for the mrgsolve::ev_rx function in a pop-up window. The rendered documentation outlines the syntax rules for defining a dosing regimen and includes some helpful examples. The Rx Label syntax rules are defined below:   4.1.1 Rx Label Syntax The dose is found at the start of the string by sequential digits; this may be integer, decimal, or in scientific notation. Use in to identify the dosing compartment number; must be integer. Use q to identify the dosing interval; must be integer or decimal number (but not scientific notation). Use over to indicate an infusion and its duration; integer or decimal number. Use x to indicate total number of doses; must be integer. Use then or , to separate dosing periods. User after to insert a lag in the start of a period; integer or decimal number (but not scientific notation).   Provided is an example of a three event dosing regimen using the mrgsolve mrgsolve::ev_rx function. ev_rx(&quot;150 mg over 0.25 in 2, 100 mg in 1 over 0.25 q14 x 6 after 28, 100 mg over 0.25 in 2 q7 x 8 after 0.5&quot;) Events: time amt rate ii addl cmt evid 1 0.0 150 600 0 0 2 1 2 28.0 100 400 14 5 1 1 3 112.5 100 400 7 7 2 1 mrgsolve: Event objects mrgsolve: ev_rx   4.2 Submit Dosing Regimen Step 2/4 of Simulation Steps After specifying the dosing regimen, Submit Dosing Regimen submits the regimen and creates an Rx Dosing Event Dataset as an input to the simulation. The variables included in the dosing event dataset are fixed and the values are dynamically populated according to the specified regimen. Multiple dosing regimens can be and are submitted sequentially. Each regimen is labeled through unique identifier columns REGNUM and REGLAB. The dosing regimens that have Include selected will only be considered for downstream analysis. An example of submitting the default placeholder regimen segmented into three different regimens is shown below. After submitting all desired regimens, they can be visualized through the Rx Dosing Profile plot, which depicts the concentration-time profile of a typical subject (no random effects applied) in the predefined dosing regimen, as shown below.   If there is an error in syntax upon submission, Define Dosing Regimen will return (“Invalid Rx specification! Please follow Rx syntax rules…”).   The Rx Dosing Event Dataset can be downloaded as a (.csv) file. mrgsolve: Event data sets   4.3 Simulation Options 4.3.1 Time Grid The attributes of the simulation Time Grid can be combined with the specified model to create complex sampling designs. The time attributes of the simulation will affect all outputs including the simulation input dataset, simulation output dataset, summary statistic, graph, and report, and are described below: start: a number indicating start time for the simulation of the PK model. end: a number indicating end time for the simulation of the PK model. By default, the end parameter is set to the calculated simulation end time. Selecting modify end allows a custom value for end. delta: a number indicating the simulation time step, which is the duration between subsequent time points in the simulation. add: is any arbitrary vector of additional times to simulate. offset: a number that shifts all resulting tgrid time points by a fixed amount. scale: a number that scales all other tgrid input parameters multiplicatively. mrgsolve: Simulation time grid mrgsolve: Time grid objects   4.3.2 Simulation Settings The Simulation Settings option allows a user to apply the dosing event dataset to a population of subjects, choose the number of simulation iterations, and specify the random seed at which to perform simulations. Specify number of subjects: Sets the number of subjects to simulate under the defined dosing regimen. Specify number of simulation iterations: Sets the number of simulation iterations to run. Specify random seed: A random seed is a starting point for generating random numbers and is useful for creating simulations that can be reproduced. The default seed is 2674474. Although the seed is specified once, each simulation iteration will force the seed to change so that the random effect parameters are modeled appropriately.   4.3.3 Solver Settings The Solver Settings described below are stored in the model object and passed to the solver when the simulation is started. atol: Absolute tolerance parameter for local error estimate. Adjust this value lower when you see state variables (compartments) that are becoming very small and possibly turning negative. rtol: Relative tolerance parameter for local error estimate. Adjust this value lower when you want more precision around the calculation of state variables as the system advances. ss_rtol: Steady state absolute tolerance parameter to control the local error estimate when mrgsolve is finding steady state. ss_atol: Steady state relative tolerance parameter to control the local error estimate when mrgsolve is finding steady state. maxsteps: This is the maximum number of steps the solver will take when advancing from one time to the next. hmax: The maximum step size. By default, the solver will take steps of different sizes based on what is happening in the simulation. So in a model where time is in hours, reducing hmax to 0.1 will prevent the solver from taking a step larger than 0.1 hours as it tries to advance to the next time. hmin: The minimum step size. Only set this if you’re familiar with this setting. ixpr: A flag to enable printing messages to the R console when the solver switches between non-stiff and stiff solving modes. Rarely used. mxhnil: The maximum number of messages printed when the model is solving. If you have a lot of messages, keep working on your model code. mrgsolve: Solver settings mrgsolve: Steady state   4.3.4 Expand Rx Dataset Step 3/4 of Simulation Steps In order to generate a standardized input dataset for simulation, which contains all default or user-defined Dosing Regimens and Simulation Options, the dataset needs to be “expanded”. For example: After specifying the setting: Specify number of subjects in 4.3.2 Simulation Settings, the same dosing regimen Rx event object can be “expanded” for multiple individuals to create a population dataset. The Expand Rx Dataset button combines all simulation input parameters to generate and display the expanded dataset in the Simulation Input Dataset section at the bottom of the page. After the initial execution of Expand Rx Dataset, modifying simulation input parameters on the “Model Selection” or “Simulation Options” tabs will require the user to re-expand the input dataset prior to simulation.   Transient pop-up messages will appear stating the steps of the dataset expansion in the form of:   The Simulation Input dataset can be downloaded as a (.csv) file. mrgsolve: Event Objects   "],["simulation-output.html", "Chapter 5 Simulation Output 5.1 User Settings &amp; Output Metrics 5.2 Start Simulation 5.3 Pharmacokinetic profiles 5.4 Summary statistics", " Chapter 5 Simulation Output This part of the application has options for customizing the simulation outputs and a preview pane that renders the outputs of the simulation after being processed. What is rendered here will be exported to the report.   5.1 User Settings &amp; Output Metrics 5.1.1 Plotting Options 5.1.1.1 Aesthetic Text Size: Controls the text size of the legend and description. Transparency: Controls the transparency of the data points of user added data (see section 5.1.1.3) 5.1.1.2 Model Options Show Prediction Interval: Enables the prediction interval to display on plot (if random effects are added). No variability can be selected. This selection is displayed in the plot description. Concentration Units: Selection to display the concentration/units on the y-axis. Select Plot DV: Selection for which dependent variable is to be plotted on y-axis. Note that the annotation of this selection is added to the plot description and is taken from the $CAPTURE @annotated block of the model specification file. 5.1.1.3 Add user data (optional) This application allows users to visually compare the simulation results to an external dataset. Column headers should minimally include the following columns: ID, CONCENTRATION, TIME. A DOSE column can be added to stratify the data. 5.1.1.3.1 User Data Options These options only become available is there is an uploaded dataset by the user. Select Plot DV User: Choose the desired DV, which should be the same as the DV selected in the simulation model options. Facet Variable: Allows users to stratify the plots by this selection. An example is shown in section 5.3. 5.2 Start Simulation Step 4/4 of Simulation Steps In order to process the Simulation Input Dataset and display simulation results, the Start simulation button should be used.   Transient pop-up messages will appear stating the steps of the simulation in the form of:   5.3 Pharmacokinetic profiles Pharmacokinetic profile plots are rendered with the selected dependent variable on the y-axis and Time after dose (days) on the x-axis. Note that there are buttons for Linear, Log, and Both to display accordingly in the Pharmacokinetic Profile Plots section.   A rendering of the simulation output is displayed below. A rendering of the simulation output as well as the added user data is displayed below.   Plotting Options can be changed after the simulation is processed but will only render visually to the profiles pane if Start simulation is executed again.   The simulated dataset can be downloaded as a (.csv) file. This dataset is different from the Simulation Input Dataset previously generated because it contains a unique identifier column (REPI) representing the Specify number of simulation iterations setting discussed in Section 4.3.2. Simulation Settings as well as the results for each simulation iteration.   5.4 Summary statistics Summary statistics provide output metrics of the simulation and are calculated as follows:   PK metrics (Cmax, Tmax, &amp; AUC) are calculated for each subject, and the median value is summarized across subjects within each simulation iteration and dosing regimen. Finally, PK metric summary statistics (median, mean, &amp; standard deviation) are calculated by dosing regimen across the simulation iterations. Cmax: The maximum concentration of simulated drug Tmax: The time at which the maximum concentration of drug is achieved Tlast: The maximum time in the interval AUC: The Area Under the Curve is calculated following the trapezoid rule from flux::auc() Users have the ability to control the time at which PK metrics are calculated by using the Interval slider. flux::auc()   "],["report-generation.html", "Chapter 6 Report Generation 6.1 Final Report", " Chapter 6 Report Generation Reporting information requests information that is captured in the final output. This is meant to formalize and track simulation runs.     The Generate Report function exports the simulated run as a (.pdf) file with the naming convention: popPK-simulation-report_(date). By default, this will render a DRAFT watermark on each page of the report unless Final Version is selected.   6.1 Final Report The final report captures information from the simulation including (in order): Reporting information Model used Description Graphical outputs Summary Statistics Model names (definitions) Model details Model parameters Omega and Sigma matrices (correlation form) Initial conditions Output variables Simulation settings Solver settings Time grid settings Simulation time points Rx dosing specification Rx dosing specification Rx dosing dataset   Below is an exmaple of a report that was generated from a sample run.     "],["general-information.html", "Chapter 7 General Information", " Chapter 7 General Information This section provides information that may be helpful.   "],["ref.html", "Chapter 8 References", " Chapter 8 References These references are in order of when they appear in the document. mrgsolve: Model Specification mrgsolve: Code blocks mrgsolve: Examples mrgsolve: Annotated model specification mrgsolve::mvgauss() mrgsolve: Random effect variances mrgsolve: Event objects mrgsolve: ev_rx mrgsolve: Event data sets mrgsolve: Simulation time grid mrgsolve: Time grid objects mrgsolve: Solver settings mrgsolve: Steady state flux::auc()   "],["session-information.html", "Chapter 9 Session Information", " Chapter 9 Session Information This documentation was created in R Studio with the following packages   ## R version 4.2.1 (2022-06-23 ucrt) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19043) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=English_United States.utf8 LC_CTYPE=English_United States.utf8 ## [3] LC_MONETARY=English_United States.utf8 LC_NUMERIC=C ## [5] LC_TIME=English_United States.utf8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] knitr_1.39 tinytex_0.40 tidyr_1.2.0 ## [4] assertr_2.8 matrixcalc_1.0-5 ggpubr_0.4.0 ## [7] rmarkdown_2.14 markdown_1.1 flux_0.3-0.1 ## [10] caTools_1.18.2 DT_0.23 data.table_1.14.2 ## [13] purrr_0.3.4 dplyr_1.0.9 mrgsolve_1.0.0 ## [16] bs4Dash_2.1.0 plotly_4.10.0 ggplot2_3.3.6 ## [19] htmlwidgets_1.5.4 reactable_0.3.0 rhandsontable_0.3.8 ## [22] shinyjs_2.1.0 shinyBS_0.61.1 shinyFeedback_0.4.0 ## [25] shinyWidgets_0.7.1 tablerDash_0.1.0 shiny_1.7.2 ## ## loaded via a namespace (and not attached): ## [1] bitops_1.0-7 fontawesome_0.3.0 httr_1.4.3 tools_4.2.1 ## [5] backports_1.4.1 bslib_0.4.0 utf8_1.2.2 R6_2.5.1 ## [9] DBI_1.1.3 lazyeval_0.2.2 colorspace_2.0-3 withr_2.5.0 ## [13] gridExtra_2.3 tidyselect_1.1.2 compiler_4.2.1 textshaping_0.3.6 ## [17] cli_3.3.0 labeling_0.4.2 sass_0.4.2 scales_1.2.0 ## [21] stringr_1.4.0 systemfonts_1.0.4 digest_0.6.29 pkgconfig_2.0.3 ## [25] htmltools_0.5.3 highr_0.9 fastmap_1.1.0 rlang_1.0.3 ## [29] rstudioapi_0.13 jquerylib_0.1.4 generics_0.1.3 farver_2.1.1 ## [33] jsonlite_1.8.0 crosstalk_1.2.0 car_3.1-0 magrittr_2.0.3 ## [37] Rcpp_1.0.9 munsell_0.5.0 fansi_1.0.3 abind_1.4-5 ## [41] lifecycle_1.0.1 stringi_1.7.8 yaml_2.3.5 carData_3.0-5 ## [45] grid_4.2.1 parallel_4.2.1 promises_1.2.0.1 crayon_1.5.1 ## [49] lattice_0.20-45 cowplot_1.1.1 pillar_1.8.0 ggsignif_0.6.3 ## [53] glue_1.6.2 evaluate_0.16 vctrs_0.4.1 httpuv_1.6.5 ## [57] gtable_0.3.0 reactR_0.4.4 assertthat_0.2.1 cachem_1.0.6 ## [61] xfun_0.31 mime_0.12 xtable_1.8-4 broom_1.0.0 ## [65] rstatix_0.7.0 later_1.3.0 ragg_1.2.2 viridisLite_0.4.0 ## [69] tibble_3.1.8 memoise_2.0.1 ellipsis_0.3.2 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
